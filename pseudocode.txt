Class Node:
    Integer frequency
    Node leftNode
    Node rightNode

    Constructor(Node leftNode, Node rightNode):
        this.frequency = leftNode.frequency + rightNode.frequency
        this.leftNode = leftNode
        this.rightNode = rightNode

    Integer getFrequency():
        return this.frequency

    Node getLeftNode():
        return leftNode

    Node getRightNode():
        return rightNode

    Function compareTo(Node node):
        Return Compare(this.frequency, node.frequency)

End Class

Class Leaf extends Node:
    Character character

    Constructor(Character character, Integer frequency):
        Super(null, null)
        this.character = character

    Character getCharacter():
        Return character

End Class

Class Huffman:
    Node root
    String text
    Map<char, Integer> charFrequencies
    Map<char, String> huffmanCodes

    Constructor(String text):
        this.text = text
        fillCharFrequenciesMap()
        huffmanCodes = New Map<char, String>()

    Function fillCharFrequenciesMap():
        charFrequencies = New Map<char, Integer>()
        For each character in text:
            If charFrequencies contains character:
                charFrequencies[character] += 1
            Else:
                charFrequencies[character] = 1

    Function encode():
        Queue<Node> queue = New PriorityQueue<Node>()
        For each character, frequency pair in charFrequencies:
            queue.add(New Leaf(character, frequency))
        While queue size > 1:
            queue.add(New Node(queue.poll(), queue.poll()))
        root = queue.poll()
        generateHuffmanCodes(root, "")
        Return getEncodedText()

    Function generateHuffmanCodes(Node node, String code):
        If node is instance of Leaf:
            huffmanCodes[node.getCharacter()] = code
            Return
        generateHuffmanCodes(node.getLeftNode(), code.concat("0"))
        generateHuffmanCodes(node.getRightNode(), code.concat("1"))

    Function getEncodedText():
        StringBuilder sb = New StringBuilder()
        For each character in text:
            sb.append(huffmanCodes[character])
        Return sb.toString()

    Function decode(String encodedText):
        StringBuilder sb = New StringBuilder()
        Node current = root
        For each character in encodedText:
            current = If character is '0' then current.getLeftNode() else current.getRightNode()
            If current is instance of Leaf:
                sb.append(current.getCharacter())
                current = root
        Return sb.toString()

    Function printCodes():
        For each character, code pair in huffmanCodes:
            Print character + ": " + code

End Class

Main:
    Function main():
        Huffman huffman = New Huffman("aaaaaaaaaaabbbbbbbbccccccdddddd")
        String encodedText = huffman.encode()
        Print encodedText

        huffman.printCodes()

        String originalText = huffman.decode(encodedText)
        Print originalText

End Main
